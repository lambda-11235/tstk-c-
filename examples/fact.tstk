# Reads a number and prints the factorial

read

ppos 6 add    # Set return address to just after the next jmp
swap          # Put the argument(s) after the return address
@fact jmp     # Jump to fact function

# Print result and end program
print
@end jmp

# The factorial function
:fact:
# Simply return 1 if input is <= 1
dup 2 @one jlt

# Compute the factorial of the argument - 1.
dup 1 sub
ppos 6 add swap
@fact jmp

# Multiply and return
mul
@factEnd jmp

:one:
pop
1

:factEnd:
# Swap the result and the return address, and then jmp
swap
jmp

:end: